# jobs:
#   build:
#     docker:
#       - image: cimg/python:3.10.1
#     steps:
#       - checkout
#       - run:
#           name: Setup Code Climate test-reporter
#           command: |
#               # download test reporter as a static binary
#               curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
#               chmod +x ./cc-test-reporter
#               ./cc-test-reporter before-build
#       - run:
#           name: Install dependencies
#           command: pip install -r requirements.txt
#       - run:
#           name: Running Tests
#           command: coverage run -m unittest && coverage xml && coverage report -m
#       - run:
#           name: Update CodeClimate coverage report
#           command: |
#               ./cc-test-reporter after-build  12:15

#version: 2.1
#jobs:
#  build:
#    docker:
#      - image: cimg/python:3.10.1
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: pip install -r requirements.txt
#      - run:
#          name: Running Tests
#          command: coverage run -m unittest && coverage xml && coverage report -m --omit="*/__init__.py"
version: 2.1
jobs:
  build:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apk update
            apk add docker
            apk add curl
            apk add python3
            apk add py3-pip
            DOCKER_CONFIG="${HOME}/.docker"
            mkdir -p "$DOCKER_CONFIG/cli-plugins"
            curl -SL https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o "$DOCKER_CONFIG/cli-plugins/docker-compose"
            chmod +x "$DOCKER_CONFIG/cli-plugins/docker-compose"
            pip3 install coverage
            pip3 install parameterized
            pip3 install redis
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker Image
          command: docker build -t scrabble .
      - run:
          name: Run test
          command: ./run_test.sh
#      - run:
#          name: Start Docker Compose
#          command: docker compose -f 'docker-compose-test.yml' up
#            test_result=$?
#
#            if [ $test_result -eq 0 ]; then
#              echo "Tests passed successfully. Continuing with the workflow."
#            else
#              echo "Tests failed. Stopping the workflow."
#              exit 1
#            fi

            

